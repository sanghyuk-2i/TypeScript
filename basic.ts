
// primitive check
const num:number = 1;
const str:string = 'hello world!';
const bol:boolean = true;

// object check
function goCheck(): string | undefined {
    return 'hello';
}

// undefined & null
let named: undefined; // ьЭ┤ыаЗъ▓М ьУ░ьзАыКФ ьХКьЭМ
let namedd: null; // ьЭ┤ыаЗъ▓М ьУ░ьзАыКФ ьХКьЭМ

let age: number | undefined; // ьЭШып╕ьГБ ьЭ┤ъ▓М ьаБьаИэХЬ ы░йы▓Х
let agee: number | null;

// unknown(ы╣Дь╢Фь▓Ь)
let isSure: unknown = 0;
isSure = 'hello';
isSure = true;

// any(ы╣Дь╢Фь▓Ь)
let anything: any = 0;
anything = 'hello';

// void -> ьВмьЛд ьГЭыЮ╡эХ┤ьДЬ ъ░АыКе
function checkPrint(): void {
    console.log('hello');
    return;
}

// never
function throwError(msg: string): never {
    throw new Error(msg);
}

// object
let obj: object;
function checkObject(obj: object) {}
checkObject({ what: 'object'});
checkObject({ which: 'typescript'});


// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб


// About Function

// JavaScript Version
function jsAdd(num1, num2) {
    return num1 + num2;
}

function jsFetchNum(id) {
    return new Promise((resolve, reject) => {
        resolve(100);
    });
}

// TypeScript Version
function add(num1: number, num2: number): number {
    return num1 + num2;
}

function fetchNum(id: string): Promise<number> {
    return new Promise((resolve, reject) => {
        resolve(100);
    });
}

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Optional parameter -> ?
// "last?"ьЭД эЩХьЭ╕ 
function printName(first: string, last?: string) {
    console.log(first);
    console.log(last);
}

printName("Eddy", "Lee");
printName("Eddy");


// Default parameter
function printMessage(message: string = "default message") {
    console.log(message);
}
printMessage();

// Rest parameter
function addNumbers(...numbers: number[]): number{
    return numbers.reduce((a,v) => a + v);
}
console.log(addNumbers(1, 2));
console.log(addNumbers(1, 2, 3));
console.log(addNumbers(1, 2, 3, 4, 5));

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Array
const names: string[] = ['apple', 'banana'];
const sccor: Array<number> = [1, 2, 4];
// readonly -> ьИШьаХэХа ьИШ ьЧЖьЭМ, Array<string>ыКФ ьХИыРи
function printArray(fruits: readonly string[]) {}

// Tuple
let student: [string, number];
student = ['name', 123];
console.log(student[0]);
console.log(student[1]);

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// type alias

type Texts = string;
const nammmme: Texts = 'Eddy';
type Car = {
    name : string;
    sn: number;
};
const new_car: Car = {
    name: 'benz',
    sn: 12345,
};

// String Literal Types -> ьДаьЦ╕ыРЬ ъ░ТызМ эХаыЛ╣эХа ьИШ ьЮИыЛд.
type JON = 'json';
const json: JON = 'json';

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Union Types: OR

type Direction = 'left' | 'right' | 'up' | 'down';
function move(direction: Direction) {
    console.log(direction);
}
move('down');

type SuccessState = {
    response: {
        body: string;
    };
};
type FailState = {
    reason: string;
};

type LoginState = SuccessState | FailState;

function login(): LoginState {
    return {
        response: {
            body: "logged in!",
        }
    };
}

function printLoginState(state: LoginState) {
    if('response' in state){
        console.log(`goood!`);
    }else {
        console.log(`oh no!`);
    }
}

// Discriminated Union

type TrainState = {
    result: 'success';
};

type TestState = {
    result: 'fail';
};

function printCheckingState(state: TrainState | TestState) {
    if(state.result){
        console.log(`goood!`);
    }else {
        console.log(`oh no!`);
    }
}

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Intersection Types: AND

type Person = {
    name: string;
    id: number;
};

type Animal = {
    feedNumber: number;
    sound: () => void;
};

function giveFood(person: Person & Animal) {
    console.log(person.name, person.feedNumber, person.sound());
}

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Enum (ы╣Дь╢Фь▓Ь)
// Problem -> эХаыЛ╣ эХаыХМ, Days эГАьЮЕ ы┐РызМ ьХДыЛИыЭ╝ ьИльЮРыПД ыДгьЭД ьИШ ьЮИьЭМ

enum Days {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Satarday,
    Sunday,
}
console.log(Days.Satarday);

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Type Inference(эГАьЮЕ ь╢Фыба) 
// ьЫРьЛЬ эГАьЮЕьЭА ьВмьЛд эГАьЮЕ ь╢ФыбаьЭД эЩЬьЪйэХ┤ыПД ыРШьзАызМ, эФДыбЬьаЭэК╕ ьзДэЦЙэХШыКФ ъ▓ГьЧР ыМАэХ┤ьДЬыКФ эГАьЮЕьЭД ы░ШыУЬьЛЬ ьДаьЦ╕эХШыКФ ъ▓ГьЭД ь╢Фь▓Ь

let text = 'hello';
text = 'hi';

function printLetter(message = 'hello') {
    console.log(message);
}

function calAdd(x: number, y: number) {
    return x + y;
}
const check_result = add(1, 2);

// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб
// уЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕбуЕб

// Type Assertion (ы╣Дь╢Фь▓Ь)

function jsStrFunc(): any {
    return 'hello';
}
const nedCheck = jsStrFunc();
console.log((nedCheck as string).length);
console.log((<string>nedCheck).length);

const wrong: any = 5;
console.log((wrong as Array<number>).push(1)) // ЁЯШ▒

function findNumbers(): number[] | undefined {
    return undefined;
}
const numb = findNumbers();
numb!.push(2); // ЁЯШ▒